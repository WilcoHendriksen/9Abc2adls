trigger:
  branches:
    include:
      - development
      - release

pool:
  vmImage: 'Windows-Latest'

variables:
  appVersion: '1.0'
  appBuild: 0
  appRevision: $(Build.BuildID)

jobs:
- job: Build
  timeoutInMinutes: 300
  variables:
    build.clean: all
    platform: x64
    version: 'ci'
    skipComponentGovernanceDetection: True

  steps:
  - task: PowerShell@2
    displayName: 'Set BuildNumber'
    inputs:
      targetType: inline
      script: 'Write-Host "##vso[build.updatebuildnumber]$(appVersion).$(appBuild).$(appRevision)"'

  - task: PowerShell@2
    displayName: 'Run Pipeline'
    env:
      BcSaasRefreshToken: '$(BcSaasRefreshToken)'
      EnvironmentName: '$(environmentName)'
    inputs:
      targetType: filePath
      filePath: 'scripts\DevOps-Pipeline.ps1'
      arguments: '-version $(version) -appBuild $(appBuild) -appRevision $(appRevision)'
      failOnStderr: true

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: and(succeeded(),ne(variables['TestResults'],''))
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: '$(testResults)'
      failTaskOnFailedTests: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: output

  - task: PowerShell@2
    displayName: 'Cleanup'
    condition: always()
    inputs:
      targetType: filePath
      filePath: 'scripts\Cleanup.ps1'
      arguments: '-environment "AzureDevOps"'
      failOnStderr: false

- job: publish
  dependsOn: Build
  condition: succeeded()
  variables:
    KeyVault.Subscription: 'birds-services-accp-arm'
    KeyVault.Name: 'birds-services-accp-kv'
    KeyVault.SecretKey: 'Library--StorageAccountKey'
    StorageAccount.Name: 'birdssrvlibraryaccpblob'
    StorageAccount.Container: 'bc2adls'
    AppFilename: 9A business analytics_9A Azure Data Lake Storage Export_$(appVersion).$(appBuild).$(appRevision).app
  steps:
  - task: AzureKeyVault@2
    displayName: 'Load StorageAccount Key'
    inputs:
      azureSubscription: '$(KeyVault.Subscription)'
      KeyVaultName: '$(KeyVault.Name)'
      SecretsFilter: '$(keyVault.SecretKey)'
      RunAsPreJob: true

  - task: PowerShell@2
    displayName: 'publish to storage'      
    inputs:
      targetType: filePath
      filePath: 'scripts\publish-file-to-storage.ps1'
      arguments: 
        >
        -storageAccountName '$(StorageAccount.Name)'
        -storageAccountKey '$(Library--StorageAccountKey)'
        -storageContainer '$(StorageAccount.Container)'
        -fileToUpload '$(System.DefaultWorkingDirectory)\output\Apps\$(appFilename)'
        -blobFileName '$(AppFilename)'
      failOnStderr: true